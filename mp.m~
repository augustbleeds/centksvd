%% Matching Pursuit 
function X = mp(Y,D,sparsity)
% Inputs:   Y - signal 
%           sparisty (OPTIONAL) - sparsity constraint  
% Output: Construct X s.t Y = DX

if(nargin < 3)
   sparsity = intmax;   % sparsity constrained is relaxed
                        % stopping condition is only governed by residual
end 

[m1,k] = size(Y);
[m2,n] = size(D);

if(m1~=m2)
    error('The dimensions of the signal Y and dictionary D do not match');
end

X = zeros(n,k);         % initialize the sparse coding

for i=1:k               % find sparse coding of EACH column
    R = Y(:,i);         % init residual R to signal column
    
    
    while( (norm(R) > 1e-2) || (l0norm(R) > sparsity) )
        
        temp = 
        
        %for i=1:1  
        %    max = abs(dot(R,D(:,1)));   % select maximum dot product
        %    index = 1;
       
       
       %for j=2:n   
       %    temp = abs(dot(R,D(:,j)));
       %    if( max < temp )
       %       index = j;
       %       max = temp; 
       %    end
       %end 
       
       X(index,i) = max;    % place coefficient in proper row of vector
       
       R = R - max*D(:,index);         % recompute residual
    
       end  
    
    end
    
end

    
end